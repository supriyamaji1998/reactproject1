{"version":3,"sources":["components/AlertAPI.js","components/Navbar.js","components/WordList.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["AlertAPI","props","alert","Alert","variant","type","message","NavbarBox","Navbar","collapseOnSelect","expand","bg","mode","Collapse","id","Form","className","style","margin","Check","label","onClick","tooglemode","WordList","useState","wordCountList","setWordCountList","useEffect","handleCount","text","wordarr","split","updatedWordCountList","forEach","word","border","width","Object","keys","length","map","keyName","keyIndex","TextForm","timeReq","setText","filter","ele","heading","Group","controlId","Label","Control","as","value","rows","onChange","event","console","log","target","backgroundColor","color","placeholder","Button","toUpperCase","showAlert","toLowerCase","Text","document","getElementById","select","navigator","clipboard","writeText","formatedText","join","About","App","setMode","setAlert","setTimeout","title","navlist1","navlist2","body","Container","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0e4c24f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nfunction AlertAPI(props) {\r\n  return (\r\n    <div>\r\n      {props.alert && (\r\n        <Alert variant={props.alert.type}>{props.alert.message}</Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlertAPI;\r\n","import React from \"react\";\r\n// import { Container } from \"react-bootstrap\";\r\nimport { Navbar, Nav, Form } from \"react-bootstrap\";\r\n// import { Link } from \"react-router-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function NavbarBox(props) {\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"lg\"\r\n        bg={props.mode === \"light\" ? \"primary\" : \"dark\"}\r\n        variant=\"dark\"\r\n      >\r\n        {/* <Container> */}\r\n        {/* <Link to=\"/\">\r\n          <Navbar.Brand href=\"/\" style={{ marginLeft: \"19px\" }}>\r\n            {props.title}\r\n          </Navbar.Brand>\r\n          {props.title}\r\n        </Link>\r\n        <Navbar.Toggle\r\n          aria-controls=\"responsive-navbar-nav\"\r\n          style={{ marginRight: \"19px\" }}\r\n        /> */}\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          {/* <Nav className=\"me-auto\">\r\n            <Link to=\"/\">\r\n              <Nav.Link\r\n                style={{\r\n                  display: \"flex \",\r\n                  justifyContent: \"center\",\r\n                  margin: \"0px 19px\",\r\n                }}\r\n              >\r\n                {props.navlist1}\r\n              </Nav.Link>\r\n            </Link>\r\n            <Link to=\"/about\">\r\n              <Nav.Link\r\n                style={{\r\n                  display: \"flex \",\r\n                  justifyContent: \"center\",\r\n                  margin: \"0px 19px\",\r\n                }}\r\n              >\r\n                {props.navlist2}\r\n              </Nav.Link>\r\n            </Link>\r\n          </Nav> */}\r\n          <Form className=\"d-flex text-light\" style={{ margin: \"0px 19px\" }}>\r\n            <Form>\r\n              <Form.Check\r\n                type=\"switch\"\r\n                id=\"custom-switch\"\r\n                label=\"Enable Darkmode\"\r\n                onClick={props.tooglemode}\r\n              />\r\n            </Form>\r\n          </Form>\r\n        </Navbar.Collapse>\r\n        {/* </Container> */}\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function WordList(props) {\r\n  const [wordCountList, setWordCountList] = useState({});\r\n  useEffect(() => {\r\n    handleCount();\r\n  }, [props.text]);\r\n  const handleCount = () => {\r\n    let wordarr = props.text.split(/\\s+/);\r\n    let updatedWordCountList = {};\r\n    wordarr.forEach((word) => {\r\n      if (word !== \"\") {\r\n        if (updatedWordCountList[word]) {\r\n          updatedWordCountList[word] = updatedWordCountList[word] + 1;\r\n        } else {\r\n          updatedWordCountList[word] = 1;\r\n        }\r\n      }\r\n    });\r\n    setWordCountList(updatedWordCountList);\r\n  };\r\n  return (\r\n    <div>\r\n      <ol>\r\n        <table style={{ border: \" 1px solid black\", width: \"40%\" }}>\r\n          {Object.keys.length > 0 &&\r\n            Object.keys(wordCountList).map(function (keyName, keyIndex) {\r\n              return (\r\n                <tr style={{ border: \"1px solid black\" }}>\r\n                  <td>{keyName}</td>\r\n                  <td>{wordCountList[keyName]}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </table>\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@restart/ui/esm/Button\";\r\n\r\nimport { Form } from \"react-bootstrap\";\r\nimport WordList from \"./WordList\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpperClick = () => {\r\n    console.log(\"uppercase was clicked\");\r\n    setText(text.toUpperCase());\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length && props.showAlert(\"Coverted to UpperCase\", \"success\");\r\n  };\r\n  const handleLowerClick = () => {\r\n    console.log(\"uppercase was clicked\");\r\n    setText(text.toLowerCase());\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length && props.showAlert(\"Coverted to LowerCase\", \"success\");\r\n  };\r\n  const handleCopy = () => {\r\n    const Text = document.getElementById(\"TextBox\");\r\n    Text.select();\r\n    navigator.clipboard.writeText(Text.value);\r\n    text.length && props.showAlert(\"Text copied on clipboard \", \"success\");\r\n  };\r\n  const handleExtraSpace = () => {\r\n    let formatedText = text.split(/\\s+/);\r\n    setText(formatedText.join(\" \"));\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length && props.showAlert(\"Text Formated \", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    text.length && props.showAlert(\"Text Box clear\", \"success\");\r\n  };\r\n  const handleChange = (event) => {\r\n    console.log(\"onchange was clicked\");\r\n    setText(event.target.value);\r\n  };\r\n  let timeReq = 0;\r\n\r\n  timeReq =\r\n    0.008 *\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length;\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>{props.heading}</h1>\r\n        <Form>\r\n          <Form.Group className=\"mb-3\" controlId=\"TextBox\">\r\n            <Form.Label>\r\n              <h6>Write your text here</h6>\r\n            </Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              value={text}\r\n              rows={8}\r\n              onChange={handleChange}\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"black\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\",\r\n              }}\r\n              placeholder=\"Enter your text here\"\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n        <Button className=\"btn btn-primary\" onClick={handleUpperClick}>\r\n          Convert to UpperCase\r\n        </Button>\r\n        <Button\r\n          className=\"btn btn-primary mx-3 my-3\"\r\n          onClick={handleLowerClick}\r\n        >\r\n          Convert to LowerCase\r\n        </Button>\r\n        <Button className=\"btn btn-primary\" onClick={handleCopy}>\r\n          Copy Text\r\n        </Button>\r\n        <Button\r\n          className=\"btn btn-primary mx-3 my-3\"\r\n          onClick={handleExtraSpace}\r\n        >\r\n          Format Text\r\n        </Button>\r\n        <Button className=\"btn btn-primary  \" onClick={handleClear}>\r\n          Clear All\r\n        </Button>\r\n      </div>\r\n      <div className=\"my-3\">\r\n        <h2>Your Text summary </h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((ele) => {\r\n              return ele.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p> {timeReq} minutes to read.</p>\r\n        <hr />\r\n        <hr />\r\n        <h3>Preview Text</h3>\r\n        <hr />\r\n        <p>{text}</p>\r\n      </div>\r\n      <hr />\r\n      <hr />\r\n      <div className=\"my-3\">\r\n        <h2>Word Count</h2>\r\n        <WordList text={text} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      <h1>this is About</h1>\r\n    </div>\r\n  );\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport AlertsAPI from \"./components/AlertAPI\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({ message: message, type: type });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const tooglemode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      showAlert(\"DarkMode activated sucessfully\", \"success\");\n      document.body.style.backgroundColor = \"grey\";\n    } else {\n      setMode(\"light\");\n      showAlert(\"LightMode activated sucessfully\", \"success\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        title=\"TextUtils\"\n        navlist1=\"Home\"\n        navlist2=\"About Us\"\n        mode={mode}\n        tooglemode={tooglemode}\n      />\n      <AlertsAPI alert={alert} />\n      <Container>\n        <Router>\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                heading=\"Enter the text to analyze\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            </Route>\n          </Switch>\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}