{"version":3,"sources":["components/AlertAPI.js","components/Navbar.js","components/WordList.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["AlertAPI","props","alert","Alert","variant","type","message","NavbarBox","Navbar","collapseOnSelect","expand","bg","mode","style","color","textDecoration","font","fontWeight","title","Toggle","marginRight","Collapse","id","Nav","className","Form","margin","Check","label","onClick","tooglemode","WordList","useState","wordCountList","setWordCountList","useEffect","handleCount","text","wordarr","split","updatedWordCountList","forEach","word","border","width","Object","keys","length","map","keyName","keyIndex","TextForm","timeReq","setText","filter","ele","heading","Group","controlId","Label","Control","as","value","rows","onChange","event","console","log","target","backgroundColor","placeholder","Button","toUpperCase","showAlert","toLowerCase","Text","document","getElementById","select","navigator","clipboard","writeText","formatedText","join","App","setMode","setAlert","setTimeout","navlist1","navlist2","body","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7ac12a35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nfunction AlertAPI(props) {\r\n  return (\r\n    <div>\r\n      {props.alert && (\r\n        <Alert variant={props.alert.type}>{props.alert.message}</Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlertAPI;\r\n","import React from \"react\";\r\nimport { Navbar, Nav, Form } from \"react-bootstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nexport default function NavbarBox(props) {\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"lg\"\r\n        bg={props.mode === \"light\" ? \"primary\" : \"dark\"}\r\n        variant=\"dark\"\r\n        style={{\r\n          color: \"white\",\r\n          textDecoration: \"none\",\r\n          font: \"23px\",\r\n          fontWeight: \"1000\",\r\n        }}\r\n      >\r\n        {props.title}\r\n        {/* <Link\r\n          to=\"/\"\r\n          style={{\r\n            color: \"white\",\r\n            textDecoration: \"none\",\r\n            font: \"23px\",\r\n            fontWeight: \"1000\",\r\n          }}\r\n        >\r\n          {props.title}\r\n        </Link> */}\r\n        <Navbar.Toggle\r\n          aria-controls=\"responsive-navbar-nav\"\r\n          style={{ marginRight: \"19px\" }}\r\n        />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"me-auto\">\r\n            {/* <Link\r\n              to=\"/\"\r\n              style={{\r\n                display: \"flex \",\r\n                justifyContent: \"center\",\r\n                margin: \"0px 19px\",\r\n                color: \"white\",\r\n                textDecoration: \"none\",\r\n                font: \"15px\",\r\n              }}\r\n            >\r\n              {props.navlist1}\r\n            </Link> */}\r\n            {/* <Link\r\n              to=\"/about\"\r\n              style={{\r\n                display: \"flex \",\r\n                justifyContent: \"center\",\r\n                margin: \"0px 19px\",\r\n                color: \"white\",\r\n                textDecoration: \"none\",\r\n                font: \"15px\",\r\n              }}\r\n            >\r\n              {props.navlist2}\r\n            </Link> */}\r\n          </Nav>\r\n          <Form className=\"d-flex text-light\" style={{ margin: \"0px 19px\" }}>\r\n            <Form>\r\n              <Form.Check\r\n                type=\"switch\"\r\n                id=\"custom-switch\"\r\n                label=\"Enable Darkmode\"\r\n                onClick={props.tooglemode}\r\n              />\r\n            </Form>\r\n          </Form>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function WordList(props) {\r\n  const [wordCountList, setWordCountList] = useState({});\r\n  useEffect(() => {\r\n    handleCount();\r\n  }, [props.text]);\r\n  const handleCount = () => {\r\n    let wordarr = props.text.split(/\\s+/);\r\n    let updatedWordCountList = {};\r\n    wordarr.forEach((word) => {\r\n      if (word !== \"\") {\r\n        if (updatedWordCountList[word]) {\r\n          updatedWordCountList[word] = updatedWordCountList[word] + 1;\r\n        } else {\r\n          updatedWordCountList[word] = 1;\r\n        }\r\n      }\r\n    });\r\n    setWordCountList(updatedWordCountList);\r\n  };\r\n  return (\r\n    <div>\r\n      <ol>\r\n        <table style={{ border: \" 1px solid black\", width: \"40%\" }}>\r\n          {Object.keys.length > 0 &&\r\n            Object.keys(wordCountList).map(function (keyName, keyIndex) {\r\n              return (\r\n                <tr style={{ border: \"1px solid black\" }}>\r\n                  <td>{keyName}</td>\r\n                  <td>{wordCountList[keyName]}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </table>\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@restart/ui/esm/Button\";\r\n\r\nimport { Form } from \"react-bootstrap\";\r\nimport WordList from \"./WordList\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpperClick = () => {\r\n    console.log(\"uppercase was clicked\");\r\n    setText(text.toUpperCase());\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length && props.showAlert(\"Coverted to UpperCase\", \"success\");\r\n  };\r\n  const handleLowerClick = () => {\r\n    console.log(\"uppercase was clicked\");\r\n    setText(text.toLowerCase());\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length && props.showAlert(\"Coverted to LowerCase\", \"success\");\r\n  };\r\n  const handleCopy = () => {\r\n    const Text = document.getElementById(\"TextBox\");\r\n    Text.select();\r\n    navigator.clipboard.writeText(Text.value);\r\n    text.length && props.showAlert(\"Text copied on clipboard \", \"success\");\r\n  };\r\n  const handleExtraSpace = () => {\r\n    let formatedText = text.split(/\\s+/);\r\n    setText(formatedText.join(\" \"));\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length && props.showAlert(\"Text Formated \", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    text.length && props.showAlert(\"Text Box clear\", \"success\");\r\n  };\r\n  const handleChange = (event) => {\r\n    console.log(\"onchange was clicked\");\r\n    setText(event.target.value);\r\n  };\r\n  let timeReq = 0;\r\n\r\n  timeReq =\r\n    0.008 *\r\n    text.split(/\\s+/).filter((ele) => {\r\n      return ele.length !== 0;\r\n    }).length;\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>{props.heading}</h1>\r\n        <Form>\r\n          <Form.Group className=\"mb-3\" controlId=\"TextBox\">\r\n            <Form.Label>\r\n              <h6>Write your text here</h6>\r\n            </Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              value={text}\r\n              rows={8}\r\n              onChange={handleChange}\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"black\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\",\r\n              }}\r\n              placeholder=\"Enter your text here\"\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n        <Button className=\"btn btn-primary\" onClick={handleUpperClick}>\r\n          Convert to UpperCase\r\n        </Button>\r\n        <Button\r\n          className=\"btn btn-primary mx-3 my-3\"\r\n          onClick={handleLowerClick}\r\n        >\r\n          Convert to LowerCase\r\n        </Button>\r\n        <Button className=\"btn btn-primary\" onClick={handleCopy}>\r\n          Copy Text\r\n        </Button>\r\n        <Button\r\n          className=\"btn btn-primary mx-3 my-3\"\r\n          onClick={handleExtraSpace}\r\n        >\r\n          Format Text\r\n        </Button>\r\n        <Button className=\"btn btn-primary  \" onClick={handleClear}>\r\n          Clear All\r\n        </Button>\r\n      </div>\r\n      <div className=\"my-3\">\r\n        <h2>Your Text summary </h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((ele) => {\r\n              return ele.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p> {timeReq} minutes to read.</p>\r\n        <hr />\r\n        <hr />\r\n        <h3>Preview Text</h3>\r\n        <hr />\r\n        <p>{text}</p>\r\n      </div>\r\n      <hr />\r\n      <hr />\r\n      <div className=\"my-3\">\r\n        <h2>Word Count</h2>\r\n        <WordList text={text} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport AlertsAPI from \"./components/AlertAPI\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport React from \"react\";\r\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n// import About from \"./components/About\";\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert = (message, type) => {\r\n    setAlert({ message: message, type: type });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  };\r\n  const tooglemode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      showAlert(\"DarkMode activated sucessfully\", \"success\");\r\n      document.body.style.backgroundColor = \"grey\";\r\n    } else {\r\n      setMode(\"light\");\r\n      showAlert(\"LightMode activated sucessfully\", \"success\");\r\n      document.body.style.backgroundColor = \"white\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Router> */}\r\n      <Navbar\r\n        title=\"TextUtils\"\r\n        navlist1=\"Home\"\r\n        navlist2=\"About Us\"\r\n        mode={mode}\r\n        tooglemode={tooglemode}\r\n      />\r\n      <AlertsAPI alert={alert} />\r\n      <Container>\r\n        {/* <Switch>\r\n            <Route exact path=\"/about\" component={About} /> */}\r\n        {/* <About /> */}\r\n        {/* <Route exact path=\"/\"> */}\r\n        <TextForm\r\n          heading=\"Enter the text to analyze \"\r\n          mode={mode}\r\n          showAlert={showAlert}\r\n        />\r\n        {/* </Route> */}\r\n        {/* </Switch> */}\r\n      </Container>\r\n      {/* </Router> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}